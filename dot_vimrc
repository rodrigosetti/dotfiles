set encoding=utf-8  " Set encoding used by VIM

set shell=bash "Set Vim's shell

if has('vim_starting')
    set nocompatible               " Be improved
endif

" Plugins installation
call plug#begin('~/.vim/plugged')

Plug 'Shougo/vimproc.vim', { 'do': 'make' }
Plug 'junegunn/vim-easy-align' ":EasyAlign command
Plug 'mustache/vim-mustache-handlebars' "Mustache syntax
Plug 'scrooloose/syntastic' "Syntax checking hacks for vim
Plug 'tpope/vim-markdown' "Markdown syntax highlighting
Plug 'tpope/vim-surround' "Surround commands
Plug 'terryma/vim-multiple-cursors' "Multiple cursors (a-la Sublime)
Plug 'embear/vim-localvimrc' " Local .lvimrc files
Plug 'editorconfig/editorconfig-vim' " .editorconfig support
Plug 'bling/vim-airline' "lean & mean status/tabline for vim that's light as air
Plug 'tpope/vim-repeat' "enable repeating supported plugin maps with .
Plug 'eagletmt/ghcmod-vim' "Haskell programming on Vim, powered by ghc-mod
Plug 'ConradIrwin/vim-bracketed-paste' " Auto :set paste
Plug 'bogado/file-line' "vim index.html:20
Plug 'airblade/vim-gitgutter' " A git gutter
Plug 'ekalinin/Dockerfile.vim' "Dockerfile syntax
Plug 'derekwyatt/vim-scala' " Scala support
Plug 'wlangstroth/vim-racket' " Racket support

call plug#end()

filetype plugin indent on " Required!

" ##################################################################
" Plugins Customizations
" ##################################################################

" git gutter
set signcolumn=yes

" Airline: customization
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

"" Airline
let g:airline_powerline_fonts = 1

" Syntastic settings
let g:syntastic_javascript_checkers = ['jsxhint', 'jshint'] 
let g:syntastic_php_checkers = ['php', 'phpmd']

" Startify settings
if exists('g:startify_bookmarks')
    let g:startify_bookmarks = [ '~/.vimrc' ]
endif

" Easy Align mappings
vmap <Enter>   <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)

" ##################################################################
" End Plugins Customizations
" ##################################################################

set modelines=3
set hidden
set exrc      " Execute local .vimrc
set secure    " sand-boxed

"-- Vim UI --
set nocursorline     " Highlight current editing line
set list " we do what to show tabs, to ensure we get them out of my files
set listchars=tab:▸\ ,trail:·,precedes:«,extends:» " show tabs and trailing
set novisualbell " don't blink
set numberwidth=3 " We are good up to 99999 lines
set report=0 " tell us when anything is changed via :...
set showmatch " show matching brackets
set so=5      " minimal number of context lines

" color scheme
set t_Co=256
syntax enable
colorscheme sorcerer

if exists( '&colorcolumn' )
    set colorcolumn=80
    hi ColorColumn ctermbg=234
endif

"Add tweak for better backspace support
set backspace=indent,eol,start

set autoindent
set complete=.,w,b,u,U,t,i,d
set diffopt=filler,iwhite
set encoding=utf-8
set formatoptions=cnoqr
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set number
set norelativenumber
set pastetoggle=<F11>
set scrolloff=5
set showmode
set smartcase
set splitright
set textwidth=0
set undolevels=1000

" Turn on spell checking
"set spell spelllang=en,pt
set spell spelllang=en

"-- Filename autocomplete --
set wildmode=longest:list,full
set wildignore=*.o,*.pyc
set wildmenu

"-- No Backup --
set nobackup " make no backup files - I have git for it

"-- Programming --
set fileformats=unix,dos,mac " support all three, in this order
set iskeyword+=_,$,@,%,# " none of these are word dividers

"-- Spaces/Tabs --
set expandtab "Use spaces instead of tabs
set shiftwidth=4
set tabstop=4
set softtabstop=4

"-- Faster timeout for mappings (ESC key immediately exit modes)
set ttimeout
set ttimeoutlen=20
set notimeout

if has("vertsplit")
  set cmdwinheight=10
endif

if has("statusline")
  set laststatus=2 " always show the status line
  set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]
  "              | | | | |  |   |      |  |     |    |
  "              | | | | |  |   |      |  |     |    + current
  "              | | | | |  |   |      |  |     |       column
  "              | | | | |  |   |      |  |     +-- current line
  "              | | | | |  |   |      |  +-- current % into file
  "              | | | | |  |   |      +-- current syntax in
  "              | | | | |  |   |          square brackets
  "              | | | | |  |   +-- current fileformat
  "              | | | | |  +-- number of lines
  "              | | | | +-- preview flag in square brackets
  "              | | | +-- help flag in square brackets
  "              | | +-- readonly flag in square brackets
  "              | +-- modified flag in square brackets
  "              +-- full path to file in the buffer
endif

if has("cmdline_info")
  set showcmd " show the command being typed
  set ruler
endif

if has("cmdline_hist")
  set history=100
endif

if has("linebreak")
  set linebreak
    set showbreak=↲\
  set showtabline=2
endif

if has("folding")
  set foldmethod=indent
  set foldlevelstart=20
endif

if has("wildignore")
    set wildignore+=*.o,*.obj,*.pyc,*.orig,*.swp,.git,*.toc,*.aux,*.out,*.snm,*.nav
endif

if has("printer")
  set printoptions=paper:A4,syntax:y,number:n,wrap:y
  set printfont=Bitstream\ Vera\ Sans\ Mono\ 14
endif

nnoremap <leader><space> :noh<cr>

" Removes all extra spaces from lines
function! StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" Can't make C-^ world
noremap <C-k> <C-^>

