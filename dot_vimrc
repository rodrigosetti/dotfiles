" Install pathogen
call pathogen#infect()

set modelines=2
set nocompatible
set hidden

"-- Vim UI --
set cursorline     " Highlight current editing line
set laststatus=2 " always show the status line
set list " we do what to show tabs, to ensure we get them out of my files
set listchars=tab:»\ ,trail:• " show tabs and trailing
set novisualbell " don't blink
set numberwidth=3 " We are good up to 99999 lines
set report=0 " tell us when anything is changed via :...
set showmatch " show matching brackets
set so=5      " minimal number of context lines

" color scheme
syntax enable
set background=dark
colorscheme solarized

" external formater program
set formatprg=par

if exists( '&colorcolumn' )
    hi ColorColumn ctermbg=black guibg=black
    set colorcolumn=80
endif

"Add tweak for better backspace support
set backspace=indent,eol,start

set autoindent
set complete=.,w,b,u,U,t,i,d
set diffopt=filler,iwhite
set encoding=utf-8
set formatoptions=cnoqr
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set number
set pastetoggle=<F11>
set scrolloff=5
set showmode
set smartcase
set splitright
set textwidth=0
set undolevels=1000

" Turn on spell checking for particular filetypes
set spelllang=en,pt
autocmd BufNewFile,BufRead *.changelog setlocal spell
autocmd BufNewFile,BufRead CHANGELOG setlocal spell
autocmd BufNewFile,BufRead INSTALL setlocal spell
autocmd BufNewFile,BufRead README setlocal spell
autocmd BufNewFile,BufRead TODO setlocal spell
autocmd FileType html setlocal spell
autocmd FileType man setlocal spell
autocmd FileType markdown setlocal spell
autocmd FileType plaintex setlocal spell
autocmd FileType tex setlocal spell
autocmd FileType xhtml setlocal spell

"-- Filename autocomplete --
set wildmode=longest:list,full
set wildignore=*.o,*.pyc
set wildmenu

"-- Backup --
set backup " make backup files
set backupdir=~/.vim/backup " where to put backup files
set directory=~/.vim/tmp " directory to place swap files in

"-- Programming --
set fileformats=unix,dos,mac " support all three, in this order
set iskeyword+=_,$,@,%,# " none of these are word dividers

"-- Spaces/Tabs --
set expandtab "Use spaces instead of tabs
set shiftwidth=4
set tabstop=4
set softtabstop=4

filetype plugin indent on

if has("vertsplit")
  set cmdwinheight=10
endif

if has("statusline")
  set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]
  "              | | | | |  |   |      |  |     |    |
  "              | | | | |  |   |      |  |     |    + current
  "              | | | | |  |   |      |  |     |       column
  "              | | | | |  |   |      |  |     +-- current line
  "              | | | | |  |   |      |  +-- current % into file
  "              | | | | |  |   |      +-- current syntax in
  "              | | | | |  |   |          square brackets
  "              | | | | |  |   +-- current fileformat
  "              | | | | |  +-- number of lines
  "              | | | | +-- preview flag in square brackets
  "              | | | +-- help flag in square brackets
  "              | | +-- readonly flag in square brackets
  "              | +-- modified flag in square brackets
  "              +-- full path to file in the buffer
endif

if has("cmdline_info")
  set showcmd " show the command being typed
  set ruler
endif

if has("cmdline_hist")
  set history=100
endif

if has("linebreak")
  set linebreak
  set sbr=▸\
  set showtabline=2
endif

if has("folding")
  set foldmethod=indent
  set foldlevelstart=20
endif

if has("localmap")
  nmap <unique> <silent> <C-p> :FufFile<CR>

  " Use ctrl-s to save the file (update)
  nnoremap <silent> <C-S>      :update<CR>
  vnoremap <silent> <C-S> <C-C>:update<CR>
  inoremap <silent> <C-S> <C-O>:update<CR>

endif

if has("wildignore")
    set wildignore+=*.o,*.obj,*.pyc,*.orig,*.swp,.git,*.toc,*.aux,*.out,*.snm,*.nav
endif

if has("windows") && v:version >= 700
  function MyTabLine()
    let s = ''
    for i in range(tabpagenr('$'))
      " select the highlighting
      if i + 1 == tabpagenr()
        let s .= '%#TabLineSel#'
      else
        let s .= '%#TabLine#'
      endif

      " set the tab page number (for mouse clicks)
      let s .= '%' . (i + 1) . 'T'

      " the label is made by MyTabLabel()
      let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
    endfor

    " after the last tab fill with TabLineFill and reset tab page nr
    let s .= '%#TabLineFill#%T'

    " right-align the label to close the current tab page
    "if tabpagenr('$') > 1 let s .= '%=%#TabLine#%999Xclose' endif

    return s
  endfunction

  function MyTabLabel(n)
    let buflist = tabpagebuflist(a:n)
    let winnr = tabpagewinnr(a:n)
    let s = substitute((bufname(buflist[winnr - 1])), '.*/', '', '')
    if (empty(s))
      let s = '[No Name]'
    endif
    let s = s . ' ['. bufnr(buflist[winnr-1]) .']'
    return(s)
  endfunction

  set tabline=%!MyTabLine()

  function TabMoveFW()
    if (tabpagenr() == tabpagenr('$'))
      :execute "tabmove 0"
    else
      :execute "tabmove ". tabpagenr()
    endif
  endfunction

  function TabMoveRW()
    if (tabpagenr() < 2)
      :execute "tabmove"
    else
      :execute "tabmove ". (tabpagenr()-2)
    endif
  endfunction
endif

if has("printer")
  set printoptions=paper:A4,syntax:y,number:n,wrap:y
  set printfont=Bitstream\ Vera\ Sans\ Mono\ 14
endif

nnoremap <leader><space> :noh<cr>

:filetype plugin on

" Removes all extra spaces from lines
function! StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

command StripRight silent! :call StripTrailingWhitespaces()

